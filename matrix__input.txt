import React, { useState } from 'react';

const Matrix = () => {
  const [rows, setRows] = useState(3);
  const [cols, setCols] = useState(3);
  const [matrixValues, setMatrixValues] = useState([]);
  const [result, setResult] = useState(0);

  const handleRowsChange = (e) => {
    const newRows = parseInt(e.target.value, 10);
    setRows(newRows);
    initializeMatrixValues(newRows, cols);
  };

  const handleColsChange = (e) => {
    const newCols = parseInt(e.target.value, 10);
    setCols(newCols);
    initializeMatrixValues(rows, newCols);
  };

  const initializeMatrixValues = (newRows, newCols) => {
    const newMatrixValues = [];
    for (let i = 0; i < newRows; i++) {
      const row = [];
      for (let j = 0; j < newCols; j++) {
        row.push('');
      }
      newMatrixValues.push(row);
    }
    setMatrixValues(newMatrixValues);
  };

  const handleInputChange = (e, i, j) => {
    const newValues = [...matrixValues];
    // เพิ่มการตรวจสอบว่าค่าที่ป้อนเข้ามาเป็นตัวเลขหรือไม่
    if (isNaN(e.target.value)) {
      return;
    }
    newValues[i][j] = e.target.value;
    setMatrixValues(newValues);
  };

  const calculateResult = () => {
    // ใช้ Array.prototype.reduce() เพื่อคำนวณผลรวมของค่าทั้งหมดในเมทริกซ์
    const result = matrixValues.flat().reduce((acc, curr) => acc + curr, 0);
    setResult(result);
  };

  const renderMatrix = () => {
    // ใช้ Array.prototype.flatMap() เพื่อสร้างเมทริกซ์
    const matrix = matrixValues.flatMap((row, i) => (
      <div key={i} className="row">
        {row.map((value, j) => (
          <input
            key={`${i}-${j}`}
            value={value}
            onChange={(e) => handleInputChange(e, i, j)}
          />
        ))}
      </div>
    ));
    return matrix;
  };

  return (
    <div>
      <div>
        <label>
          Rows:
          <input
            type="number"
            value={rows}
            onChange={handleRowsChange}
          />
        </label>
        <label>
          Columns:
          <input
            type="number"
            value={cols}
            onChange={handleColsChange}
          />
        </label>
      </div>
      <div className="matrix">
        {renderMatrix()}
      </div>
      <button onClick={calculateResult}>Calculate</button>
      <div>
        Result: {result}
      </div>
    </div>
  );
};

export default Matrix;

